#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("server:server");
var fs = require("fs");
var http = require("http");
var https = require("https");
var socketio = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Certification and key for devloping
 */
var privateKey = fs.readFileSync("../certification_for_test/key.pem", "utf8");
var certificate = fs.readFileSync("../certification_for_test/cert.pem", "utf8");
var httpsOptions = { key: privateKey, cert: certificate };

/**
 * Create HTTPS server.
 */

//var server = http.createServer(app);
var server = https.createServer(httpsOptions, app);

/**
 * Bind websocket(socket.io) to http/https server
 */
var io = socketio(server, {
  cors: {
    origin: "*",
  },
});
io.on("connection", (client) => {
  console.log(`[Recog-Backend WS] Client ${client.id} connected.`);
  client.on("disconnect", () => {
    console.log(`[Recog-Backend WS] Client ${client.id} disconnected.`);
  });
  client.on("recog", handleRecogReq(client));
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

/**
 * [Face recognition]
 * Handler of recognize request
 */
function handleRecogReq(client) {
  return (data) => {
    let req_id = client.id + ";" + data.faceDeviceID;
    console.log(`Received recognition request. req_id=${req_id}`);
  };
}
