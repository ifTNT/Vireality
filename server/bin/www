#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("server:server");
var fs = require("fs");
var http = require("http");
var https = require("https");
var socketio = require("socket.io");
var zmq = require("zeromq");
const { isPrimitive } = require("util");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Certification and key for devloping
 */
var privateKey = fs.readFileSync("../certification_for_test/key.pem", "utf8");
var certificate = fs.readFileSync("../certification_for_test/cert.pem", "utf8");
var httpsOptions = { key: privateKey, cert: certificate };

/**
 * Create HTTPS server.
 */

var server = http.createServer(app);
//var server = https.createServer(httpsOptions, app);

/**
 * Create two ZeroMQ sockets to communicate with face-recog-backend
 */
var face_recog_issue_sock = zmq.socket("push");
var face_recog_recv_sock = zmq.socket("pull");
face_recog_issue_sock.bindSync("tcp://127.0.0.1:5010");
face_recog_recv_sock.bindSync("tcp://127.0.0.1:5011");
console.log(`[Face recog backend] Sockets created with port 5010 and 5011.`);
face_recog_recv_sock.on("message", handleRecogRes);

/**
 * Bind websocket(socket.io) to http/https server
 */
var io = socketio(server, {
  cors: {
    origin: "*",
  },
});
io.connected = {};
io.on("connection", (client) => {
  io.connected[client.id] = client;
  console.log(`[Recog-Backend WS] Client ${client.id} connected.`);
  client.on("disconnect", () => {
    console.log(`[Recog-Backend WS] Client ${client.id} disconnected.`);
    delete io.connected[client.id];
  });
  client.on("recog", handleRecogReq(client));
  client.on("new", handleNewReq(client));
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

/**
 * [Face recognition]
 * Handler of recognize request
 */
function handleRecogReq(client) {
  return (data) => {
    let req_id = client.id + ";" + data.faceDeviceID;
    console.log(`Received recognition request. req_id=${req_id}`);
    work_json = JSON.stringify({
      req_id: req_id,
      type: "recog",
      img: data.img,
    });
    face_recog_issue_sock.send(work_json);
    console.log("Sent to backend");
  };
}

/**
 * [Face recognition]
 * Handler of create new face request
 */
function handleNewReq(client) {
  return (data) => {
    let req_id = client.id + ";" + data.req_id;
    console.log(`Received new request. req_id=${req_id}`);
    work_json = JSON.stringify({
      req_id: req_id,
      type: "new",
      img: data.img,
      label: data.label,
    });
    face_recog_issue_sock.send(work_json);
    console.log("Sent to backend");
  };
}

/**
 * [Face recognition]
 * Handler for recognize response
 */
function handleRecogRes(data) {
  data = JSON.parse(data.toString());
  console.log(`Received recognition response. req_id=${data["req_id"]}`);
  let client_id = data["req_id"].split(";")[0];
  let face_device_id = data["req_id"].split(";")[1];
  let client = io.connected[client_id];

  // Ignore any disconnected client.
  if (client === undefined) return;

  let found = data["res_state"] === "ok";

  console.log(`Send response to client ${client.id}`);
  // Send back the response to client
  client.emit("recog_res", {
    faceDeviceID: face_device_id, // The ID of client requests
    found: found, // Indicate whether the face had been recognized in database
    userID: data["user_id"], // Should be ignored if found is false
  });
}
